"""
Defines JSON schemas to validate dictionaries generated by Inventory objects.

Name:        schema.py
Exposes:
             schema_flat (dict)    -- Defines JSON structure for flat_dict
                                      Inventory export
             subschema_flat (dict) -- JSON structure for individual data
                                      objects, within `schema_flat`

             schema_struct (dict)      -- Defines JSON structure for dicts
                                          composited with DataObjStr method
                                          update_struct_dict. Composed using
                                          subschema_struct_xxx
             subschema_struct_branch_2 (dict) -- [COMPLETE THIS]
             subschema_struct_branch_1 (dict) -- [COMPLETE THIS]
             subschema_struct_leaf (dict) -- [COMPLETE THIS]

Author:      Brian Skinn (bskinn@alum.mit.edu)

Created:     7 Dec 2017
Copyright:   (c) Brian Skinn 2016-2017
License:     The MIT License; see "LICENSE.txt" for full license terms
             and contributor agreement.

This file is part of Sphinx Objects.inv Encoder/Decoder, a toolkit for
encoding and decoding objects.inv files for use with intersphinx.

http://www.github.com/bskinn/sphobjinv

"""


# For jsonschema Draft 4.
# Schemas are defined with static field names as a versioning
# guarantee, instead of basing them dynamically on DataFields, etc.

# Flat dict schema
subschema_flat = {'name': {'type': 'string'},
                  'domain': {'type': 'string'},
                  'role': {'type': 'string'},
                  'priority': {'type': 'string'},
                  'uri': {'type': 'string'},
                  'dispname': {'type': 'string'}
                  }

schema_flat = {'$schema': "http://json-schema.org/schema#",
               'type': 'object',
               'properties': {'project': {'type': 'string'},
                              'version': {'type': 'string'},
                              'count': {'type': 'integer'},
                              'metadata': {'type': 'object'}
                              },
               'patternProperties': {'^\\d+': {'type': 'object',
                                               'properties': subschema_flat,
                                               'additionalProperties': False,
                                               'required': list(subschema_flat)
                                               }
                                     },
               'additionalProperties': False,
               'required': ['project', 'version', 'count']
               }


# Struct dict schema
# Does not proof that the value of the 'count' property is correct.
# Also does not check that 'domain', 'role', or 'name' property names
# are sane. For the most part, purely a structural check.

# Fields associated with each name
subschema_struct_leaf = {'type': 'object',
                         'properties': {'priority': {'type': 'string'},
                                        'uri': {'type': 'string'},
                                        'dispname': {'type': 'string'}
                                        },
                         'additionalProperties': False,
                         'required': ['priority', 'uri', 'dispname']
                         }

# First-level branch, property names are to be object 'name' values
subschema_struct_branch_1 = {'type': 'object',
                             'patternProperties': {'.+':
                                                   subschema_struct_leaf},
                             'additionalProperties': False
                             }

# Second-level branch, property names are to be object 'role' values
subschema_struct_branch_2 = {'type': 'object',
                             'patternProperties': {'.+':
                                                   subschema_struct_branch_1},
                             'additionalProperties': False
                             }

# Base schema. Patterned properties have to explicitly exclude the
# core named properties in order for the jsonschema Draft 4 validator
# not to attempt to match the core named properties against the
# pattern.
# Patterned properties are the domain names.
schema_struct = {'$schema': "http://json-schema.org/schema#",
                 'type': 'object',
                 'properties': {'project': {'type': 'string'},
                                'version': {'type': 'string'},
                                'count': {'type': 'integer'},
                                'metadata': {'type': 'object'}
                                },
                 'patternProperties': {('^(?!project$)(?!version$)(?!count$)'
                                        '(?!metadata$).+'):
                                       subschema_struct_branch_2},
                 'additionalProperties': False,
                 'required': ['project', 'version', 'count']
                 }
